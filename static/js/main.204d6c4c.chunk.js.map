{"version":3,"sources":["State/index.ts","Models/Cards.ts","Utility/Shuffler.ts","State/Reducer.ts","Components/Styled/Theme.ts","Components/Styled/CardBody.tsx","Components/Card.tsx","Components/Pile.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","pile","board","State","React","createContext","undefined","Cards","id","name","cardText","flavorText","stats","ShufflePile","cards","size","length","shuffled","i","j","Math","floor","random","Reducer","state","action","type","drawn","splice","index","MainTheme","createMuiTheme","ThemeProvider","ThemeProv","styled","styledCss","baseStyled","CardBody","Paper","CardContent","Grid","p","theme","spacing","DeleteButton","IconButton","RelativeCardContent","StatsAbsolute","div","CardComponent","useContext","dispatch","card","Typography","variant","gutterBottom","Divider","component","onClick","fontSize","PileComponent","container","direction","justify","alignItems","Tooltip","title","color","disabled","aria-label","App","useReducer","Provider","value","Container","item","map","c","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StylesProvider","injectFirst","CssBaseline","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.204d6c4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"../Models/Cards\";\r\nimport { Action } from \"./Actions\";\r\nimport DeepReadonly from \"../Utility/DeepReadonly\";\r\n\r\nexport type AppState = DeepReadonly<{\r\n    pile: string[];\r\n    board: Card[];\r\n}>;\r\n\r\nexport const initialState: AppState = {\r\n    pile: [],\r\n    board: [],\r\n};\r\n\r\nexport const State = React.createContext<[AppState, React.Dispatch<Action>]>([initialState, undefined as any]);\r\n","export type Card = {\r\n    id: string;\r\n    name: string;\r\n    cardText: string;\r\n    flavorText?: string;\r\n    stats?: readonly [number, number];\r\n};\r\n\r\nexport type CardsDict = {\r\n    [key: string]: Card;\r\n};\r\n\r\nexport const Cards: CardsDict = {\r\n    \"1\": {\r\n        id: \"1\",\r\n        name: \"Test1\",\r\n        cardText: \"TestText TestText TestText TestText\",\r\n    },\r\n    \"2\": {\r\n        id: \"2\",\r\n        name: \"Test2\",\r\n        cardText: \"TestText TestText TestText TestText\",\r\n        flavorText: \"FlavorText FlavorText FlavorText\"\r\n    },\r\n    \"3\": {\r\n        id: \"3\",\r\n        name: \"Test3\",\r\n        cardText: \"TestText TestText TestText TestText\",\r\n        stats: [2, 4],\r\n    },\r\n    \"4\": {\r\n        id: \"4\",\r\n        name: \"Test4\",\r\n        cardText: \"TestText TestText TestText TestText\",\r\n    },\r\n};\r\n","export const ShufflePile = (cards: readonly string[]): string[] => {\r\n    const size = cards.length;\r\n    const shuffled = [...cards];\r\n    for (let i = 0; i < size - 1; ++i) {\r\n        const j = Math.floor(i + Math.random() * (size - i));\r\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n};\r\n","import { AppState } from \".\";\r\nimport { Action } from \"./Actions\";\r\nimport { Cards } from \"../Models/Cards\";\r\nimport { ShufflePile } from \"../Utility/Shuffler\";\r\n\r\nexport const Reducer = (state: AppState, action: Action): AppState => {\r\n    switch (action.type) {\r\n        case \"Restart\":\r\n            return {\r\n                pile: ShufflePile([\"1\", \"2\", \"2\", \"3\", \"3\", \"3\", \"4\", \"4\", \"4\", \"4\"]),\r\n                board: [],\r\n            };\r\n        case \"Shuffle\":\r\n            return {\r\n                ...state,\r\n                pile: ShufflePile(state.pile),\r\n            };\r\n        case \"Draw\": {\r\n            const [drawn, ...pile] = state.pile;\r\n            return {\r\n                pile,\r\n                board: [Cards[drawn], ...state.board],\r\n            };\r\n        }\r\n        case \"DestroyCard\": {\r\n            const board = [...state.board];\r\n            board.splice(action.index, 1);\r\n            return {\r\n                ...state,\r\n                board,\r\n            };\r\n        }\r\n    }\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport baseStyled, { css as styledCss, ThemedStyledInterface, ThemedStyledProps, ThemeProvider as ThemeProv } from \"styled-components\";\r\nimport { ThemeOptions } from \"@material-ui/core/styles/createMuiTheme\";\r\n\r\nconst Options: ThemeOptions = {};\r\n\r\nconst AdditionalArgs = {};\r\n\r\nexport const MainTheme = createMuiTheme(Options, AdditionalArgs);\r\n\r\nexport const ThemeProvider = ThemeProv;\r\nexport const css = styledCss;\r\n\r\nexport type Theme = typeof MainTheme & typeof AdditionalArgs;\r\nexport type ComponentProps<T> = ThemedStyledProps<T, Theme>;\r\nconst styled = baseStyled as ThemedStyledInterface<Theme>;\r\nexport default styled;\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport styled from \"./Theme\";\r\n\r\nexport const CardBody = styled(Paper)`\r\n    width: 244px;\r\n    height: 340px;\r\n`;\r\n\r\nexport const CardContent = styled(Grid)`\r\n    height: 100%;\r\n    padding: ${p => p.theme.spacing(2)}px;\r\n`;\r\n","import { Divider, IconButton, Typography } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport React from \"react\";\r\nimport { State } from \"../State\";\r\nimport { CardBody, CardContent } from \"./Styled/CardBody\";\r\nimport styled from \"./Styled/Theme\";\r\n\r\nconst DeleteButton = styled(IconButton)`\r\n    position: absolute;\r\n    top: ${p => p.theme.spacing(1)}px;\r\n    right: ${p => p.theme.spacing(1)}px;\r\n`;\r\n\r\nconst RelativeCardContent = styled(CardContent)`\r\n    position: relative;\r\n`;\r\n\r\nconst StatsAbsolute = styled.div`\r\n    position: absolute;\r\n    bottom: ${p => p.theme.spacing(2)}px;\r\n    right: ${p => p.theme.spacing(2)}px;\r\n`;\r\n\r\ntype Props = {\r\n    index: number;\r\n};\r\n\r\nexport const CardComponent = ({ index }: Props) => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    const card = state.board[index];\r\n    return (\r\n        <CardBody>\r\n            <RelativeCardContent>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    {card.name}\r\n                </Typography>\r\n                <Typography gutterBottom>{card.cardText}</Typography>\r\n                {card.flavorText && (\r\n                    <>\r\n                        <Divider />\r\n                        <Typography variant=\"caption\" component=\"span\">{card.flavorText}</Typography>\r\n                    </>\r\n                )}\r\n                {card.stats && (\r\n                    <StatsAbsolute>\r\n                        <Typography variant=\"h6\" component=\"span\">\r\n                            {card.stats[0]}/{card.stats[1]}\r\n                        </Typography>\r\n                    </StatsAbsolute>\r\n                )}\r\n                <DeleteButton onClick={() => dispatch({ type: \"DestroyCard\", index })}>\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </DeleteButton>\r\n            </RelativeCardContent>\r\n        </CardBody>\r\n    );\r\n};\r\n","import { IconButton, Tooltip } from \"@material-ui/core\";\r\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport React from \"react\";\r\nimport { State } from \"../State\";\r\nimport { CardBody, CardContent } from \"./Styled/CardBody\";\r\n\r\nexport const PileComponent = () => {\r\n    const [state, dispatch] = React.useContext(State);\r\n    return (\r\n        <CardBody>\r\n            <CardContent container direction=\"column\" justify=\"space-evenly\" alignItems=\"center\">\r\n                <Tooltip title={state.pile.length <= 0 ? \"No cards to draw\" : \"Draw card\"}>\r\n                    <span>\r\n                        <IconButton color=\"primary\" onClick={() => dispatch({ type: \"Draw\" })} disabled={state.pile.length <= 0} aria-label=\"draw\">\r\n                            <AddBoxIcon fontSize=\"large\" />\r\n                        </IconButton>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title=\"Shuffle deck\">\r\n                    <IconButton onClick={() => dispatch({ type: \"Shuffle\" })} aria-label=\"shuffle\">\r\n                        <ShuffleIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Restart deck\">\r\n                    <IconButton color=\"secondary\" onClick={() => dispatch({ type: \"Restart\" })} aria-label=\"restart\">\r\n                        <ReplayIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </CardContent>\r\n        </CardBody>\r\n    );\r\n};\r\n","import { Container, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { initialState, State } from \"../State\";\nimport { Reducer } from \"../State/Reducer\";\nimport { CardComponent } from \"./Card\";\nimport { PileComponent } from \"./Pile\";\n\nconst App: React.FC = () => {\n    const [state, dispatch] = React.useReducer(Reducer, initialState);\n    return (\n        <State.Provider value={[state, dispatch]}>\n            <Container>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <PileComponent />\n                    </Grid>\n                    {state.board.map((c, i) => <Grid key={i} item><CardComponent index={i} /></Grid>)}\n                </Grid>\n            </Container>\n        </State.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { CssBaseline, ThemeProvider as MUIThemeProvider, StylesProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport { MainTheme, ThemeProvider } from \"./Components/Styled/Theme\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <StylesProvider injectFirst>\n        <ThemeProvider theme={MainTheme}>\n            <MUIThemeProvider theme={MainTheme}>\n                <CssBaseline />\n                <App />\n            </MUIThemeProvider>\n        </ThemeProvider>\n    </StylesProvider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}